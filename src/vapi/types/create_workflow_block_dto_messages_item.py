# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .block_start_message_conditions_item import BlockStartMessageConditionsItem
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .block_complete_message_conditions_item import BlockCompleteMessageConditionsItem


class CreateWorkflowBlockDtoMessagesItem_BlockStart(UniversalBaseModel):
    type: typing.Literal["block-start"] = "block-start"
    conditions: typing.Optional[typing.List[BlockStartMessageConditionsItem]] = None
    content: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateWorkflowBlockDtoMessagesItem_BlockComplete(UniversalBaseModel):
    type: typing.Literal["block-complete"] = "block-complete"
    conditions: typing.Optional[typing.List[BlockCompleteMessageConditionsItem]] = None
    content: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


CreateWorkflowBlockDtoMessagesItem = typing.Union[
    CreateWorkflowBlockDtoMessagesItem_BlockStart, CreateWorkflowBlockDtoMessagesItem_BlockComplete
]
