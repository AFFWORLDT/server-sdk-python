# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .callback_step import CallbackStep
from .create_workflow_block_dto import CreateWorkflowBlockDto
from .handoff_step import HandoffStep
import typing
import typing_extensions
from .server_message_assistant_request_phone_number import ServerMessageAssistantRequestPhoneNumber
from ..core.serialization import FieldMetadata
from .artifact import Artifact
from .create_assistant_dto import CreateAssistantDto
from .create_customer_dto import CreateCustomerDto
from .call import Call
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .server_message_conversation_update_phone_number import ServerMessageConversationUpdatePhoneNumber
from .server_message_conversation_update_messages_item import ServerMessageConversationUpdateMessagesItem
from .open_ai_message import OpenAiMessage
from .server_message_end_of_call_report_phone_number import ServerMessageEndOfCallReportPhoneNumber
from .server_message_end_of_call_report_ended_reason import ServerMessageEndOfCallReportEndedReason
from .server_message_end_of_call_report_costs_item import ServerMessageEndOfCallReportCostsItem
from .analysis import Analysis
import datetime as dt
from .server_message_hang_phone_number import ServerMessageHangPhoneNumber
from .server_message_model_output_phone_number import ServerMessageModelOutputPhoneNumber
from .server_message_phone_call_control_phone_number import ServerMessagePhoneCallControlPhoneNumber
from .server_message_phone_call_control_request import ServerMessagePhoneCallControlRequest
from .server_message_phone_call_control_destination import ServerMessagePhoneCallControlDestination
from .server_message_speech_update_phone_number import ServerMessageSpeechUpdatePhoneNumber
from .server_message_speech_update_status import ServerMessageSpeechUpdateStatus
from .server_message_speech_update_role import ServerMessageSpeechUpdateRole
from .server_message_status_update_phone_number import ServerMessageStatusUpdatePhoneNumber
from .server_message_status_update_status import ServerMessageStatusUpdateStatus
from .server_message_status_update_ended_reason import ServerMessageStatusUpdateEndedReason
from .server_message_status_update_messages_item import ServerMessageStatusUpdateMessagesItem
from .server_message_status_update_destination import ServerMessageStatusUpdateDestination
from .server_message_tool_calls_phone_number import ServerMessageToolCallsPhoneNumber
from .server_message_tool_calls_tool_with_tool_call_list_item import ServerMessageToolCallsToolWithToolCallListItem
from .tool_call import ToolCall
from .server_message_transfer_destination_request_phone_number import ServerMessageTransferDestinationRequestPhoneNumber
from .server_message_transfer_update_phone_number import ServerMessageTransferUpdatePhoneNumber
from .server_message_transfer_update_destination import ServerMessageTransferUpdateDestination
from .server_message_transcript_phone_number import ServerMessageTranscriptPhoneNumber
from .server_message_transcript_role import ServerMessageTranscriptRole
from .server_message_transcript_transcript_type import ServerMessageTranscriptTranscriptType
from .server_message_user_interrupted_phone_number import ServerMessageUserInterruptedPhoneNumber
from .server_message_language_changed_phone_number import ServerMessageLanguageChangedPhoneNumber
from .server_message_voice_input_phone_number import ServerMessageVoiceInputPhoneNumber
from .server_message_voice_request_phone_number import ServerMessageVoiceRequestPhoneNumber
from ..core.pydantic_utilities import update_forward_refs


class ServerMessageMessage_AssistantRequest(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["assistant-request"] = "assistant-request"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageAssistantRequestPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_ConversationUpdate(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["conversation-update"] = "conversation-update"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageConversationUpdatePhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    messages: typing.Optional[typing.List[ServerMessageConversationUpdateMessagesItem]] = None
    messages_open_ai_formatted: typing_extensions.Annotated[
        typing.List[OpenAiMessage], FieldMetadata(alias="messagesOpenAIFormatted")
    ]
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_EndOfCallReport(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["end-of-call-report"] = "end-of-call-report"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageEndOfCallReportPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    ended_reason: typing_extensions.Annotated[
        ServerMessageEndOfCallReportEndedReason, FieldMetadata(alias="endedReason")
    ]
    cost: typing.Optional[float] = None
    costs: typing.Optional[typing.List[ServerMessageEndOfCallReportCostsItem]] = None
    timestamp: typing.Optional[str] = None
    artifact: Artifact
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    analysis: Analysis
    started_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="startedAt")] = None
    ended_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="endedAt")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_Hang(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["hang"] = "hang"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageHangPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_ModelOutput(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["model-output"] = "model-output"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageModelOutputPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    output: typing.Dict[str, typing.Optional[typing.Any]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_PhoneCallControl(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["phone-call-control"] = "phone-call-control"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessagePhoneCallControlPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    request: ServerMessagePhoneCallControlRequest
    destination: typing.Optional[ServerMessagePhoneCallControlDestination] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_SpeechUpdate(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["speech-update"] = "speech-update"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageSpeechUpdatePhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    status: ServerMessageSpeechUpdateStatus
    role: ServerMessageSpeechUpdateRole
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_StatusUpdate(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["status-update"] = "status-update"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageStatusUpdatePhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    status: ServerMessageStatusUpdateStatus
    ended_reason: typing_extensions.Annotated[
        typing.Optional[ServerMessageStatusUpdateEndedReason], FieldMetadata(alias="endedReason")
    ] = None
    messages: typing.Optional[typing.List[ServerMessageStatusUpdateMessagesItem]] = None
    messages_open_ai_formatted: typing_extensions.Annotated[
        typing.Optional[typing.List[OpenAiMessage]], FieldMetadata(alias="messagesOpenAIFormatted")
    ] = None
    destination: typing.Optional[ServerMessageStatusUpdateDestination] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    transcript: typing.Optional[str] = None
    inbound_phone_call_debugging_artifacts: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]],
        FieldMetadata(alias="inboundPhoneCallDebuggingArtifacts"),
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_ToolCalls(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["tool-calls"] = "tool-calls"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageToolCallsPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    tool_with_tool_call_list: typing_extensions.Annotated[
        typing.List[ServerMessageToolCallsToolWithToolCallListItem], FieldMetadata(alias="toolWithToolCallList")
    ]
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    tool_call_list: typing_extensions.Annotated[typing.List[ToolCall], FieldMetadata(alias="toolCallList")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_TransferDestinationRequest(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["transfer-destination-request"] = "transfer-destination-request"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageTransferDestinationRequestPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_TransferUpdate(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["transfer-update"] = "transfer-update"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageTransferUpdatePhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    destination: typing.Optional[ServerMessageTransferUpdateDestination] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    to_assistant: typing_extensions.Annotated[
        typing.Optional[CreateAssistantDto], FieldMetadata(alias="toAssistant")
    ] = None
    from_assistant: typing_extensions.Annotated[
        typing.Optional[CreateAssistantDto], FieldMetadata(alias="fromAssistant")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_Transcript(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["transcript"] = "transcript"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageTranscriptPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    role: ServerMessageTranscriptRole
    transcript_type: typing_extensions.Annotated[
        ServerMessageTranscriptTranscriptType, FieldMetadata(alias="transcriptType")
    ]
    transcript: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_UserInterrupted(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["user-interrupted"] = "user-interrupted"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageUserInterruptedPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_LanguageChanged(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["language-changed"] = "language-changed"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageLanguageChangedPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    language: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_VoiceInput(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["voice-input"] = "voice-input"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageVoiceInputPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    input: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageMessage_VoiceRequest(UniversalBaseModel):
    """
    These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.

    The server where the message is sent is determined by the following precedence order:

    1. `tool.server.url` (if configured, and only for "tool-calls" message)
    2. `assistant.serverUrl` (if configure)
    3. `phoneNumber.serverUrl` (if configured)
    4. `org.serverUrl` (if configured)
    """

    type: typing.Literal["voice-request"] = "voice-request"
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageVoiceRequestPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = None
    timestamp: typing.Optional[str] = None
    artifact: typing.Optional[Artifact] = None
    assistant: typing.Optional[CreateAssistantDto] = None
    customer: typing.Optional[CreateCustomerDto] = None
    call: typing.Optional[Call] = None
    text: str
    sample_rate: typing_extensions.Annotated[float, FieldMetadata(alias="sampleRate")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ServerMessageMessage = typing.Union[
    ServerMessageMessage_AssistantRequest,
    ServerMessageMessage_ConversationUpdate,
    ServerMessageMessage_EndOfCallReport,
    ServerMessageMessage_Hang,
    ServerMessageMessage_ModelOutput,
    ServerMessageMessage_PhoneCallControl,
    ServerMessageMessage_SpeechUpdate,
    ServerMessageMessage_StatusUpdate,
    ServerMessageMessage_ToolCalls,
    ServerMessageMessage_TransferDestinationRequest,
    ServerMessageMessage_TransferUpdate,
    ServerMessageMessage_Transcript,
    ServerMessageMessage_UserInterrupted,
    ServerMessageMessage_LanguageChanged,
    ServerMessageMessage_VoiceInput,
    ServerMessageMessage_VoiceRequest,
]
update_forward_refs(CallbackStep, ServerMessageMessage_AssistantRequest=ServerMessageMessage_AssistantRequest)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_AssistantRequest=ServerMessageMessage_AssistantRequest)
update_forward_refs(HandoffStep, ServerMessageMessage_AssistantRequest=ServerMessageMessage_AssistantRequest)
update_forward_refs(CallbackStep, ServerMessageMessage_ConversationUpdate=ServerMessageMessage_ConversationUpdate)
update_forward_refs(
    CreateWorkflowBlockDto, ServerMessageMessage_ConversationUpdate=ServerMessageMessage_ConversationUpdate
)
update_forward_refs(HandoffStep, ServerMessageMessage_ConversationUpdate=ServerMessageMessage_ConversationUpdate)
update_forward_refs(CallbackStep, ServerMessageMessage_EndOfCallReport=ServerMessageMessage_EndOfCallReport)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_EndOfCallReport=ServerMessageMessage_EndOfCallReport)
update_forward_refs(HandoffStep, ServerMessageMessage_EndOfCallReport=ServerMessageMessage_EndOfCallReport)
update_forward_refs(CallbackStep, ServerMessageMessage_Hang=ServerMessageMessage_Hang)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_Hang=ServerMessageMessage_Hang)
update_forward_refs(HandoffStep, ServerMessageMessage_Hang=ServerMessageMessage_Hang)
update_forward_refs(CallbackStep, ServerMessageMessage_ModelOutput=ServerMessageMessage_ModelOutput)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_ModelOutput=ServerMessageMessage_ModelOutput)
update_forward_refs(HandoffStep, ServerMessageMessage_ModelOutput=ServerMessageMessage_ModelOutput)
update_forward_refs(CallbackStep, ServerMessageMessage_PhoneCallControl=ServerMessageMessage_PhoneCallControl)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_PhoneCallControl=ServerMessageMessage_PhoneCallControl)
update_forward_refs(HandoffStep, ServerMessageMessage_PhoneCallControl=ServerMessageMessage_PhoneCallControl)
update_forward_refs(CallbackStep, ServerMessageMessage_SpeechUpdate=ServerMessageMessage_SpeechUpdate)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_SpeechUpdate=ServerMessageMessage_SpeechUpdate)
update_forward_refs(HandoffStep, ServerMessageMessage_SpeechUpdate=ServerMessageMessage_SpeechUpdate)
update_forward_refs(CallbackStep, ServerMessageMessage_StatusUpdate=ServerMessageMessage_StatusUpdate)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_StatusUpdate=ServerMessageMessage_StatusUpdate)
update_forward_refs(HandoffStep, ServerMessageMessage_StatusUpdate=ServerMessageMessage_StatusUpdate)
update_forward_refs(CallbackStep, ServerMessageMessage_ToolCalls=ServerMessageMessage_ToolCalls)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_ToolCalls=ServerMessageMessage_ToolCalls)
update_forward_refs(HandoffStep, ServerMessageMessage_ToolCalls=ServerMessageMessage_ToolCalls)
update_forward_refs(
    CallbackStep, ServerMessageMessage_TransferDestinationRequest=ServerMessageMessage_TransferDestinationRequest
)
update_forward_refs(
    CreateWorkflowBlockDto,
    ServerMessageMessage_TransferDestinationRequest=ServerMessageMessage_TransferDestinationRequest,
)
update_forward_refs(
    HandoffStep, ServerMessageMessage_TransferDestinationRequest=ServerMessageMessage_TransferDestinationRequest
)
update_forward_refs(CallbackStep, ServerMessageMessage_TransferUpdate=ServerMessageMessage_TransferUpdate)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_TransferUpdate=ServerMessageMessage_TransferUpdate)
update_forward_refs(HandoffStep, ServerMessageMessage_TransferUpdate=ServerMessageMessage_TransferUpdate)
update_forward_refs(CallbackStep, ServerMessageMessage_Transcript=ServerMessageMessage_Transcript)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_Transcript=ServerMessageMessage_Transcript)
update_forward_refs(HandoffStep, ServerMessageMessage_Transcript=ServerMessageMessage_Transcript)
update_forward_refs(CallbackStep, ServerMessageMessage_UserInterrupted=ServerMessageMessage_UserInterrupted)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_UserInterrupted=ServerMessageMessage_UserInterrupted)
update_forward_refs(HandoffStep, ServerMessageMessage_UserInterrupted=ServerMessageMessage_UserInterrupted)
update_forward_refs(CallbackStep, ServerMessageMessage_LanguageChanged=ServerMessageMessage_LanguageChanged)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_LanguageChanged=ServerMessageMessage_LanguageChanged)
update_forward_refs(HandoffStep, ServerMessageMessage_LanguageChanged=ServerMessageMessage_LanguageChanged)
update_forward_refs(CallbackStep, ServerMessageMessage_VoiceInput=ServerMessageMessage_VoiceInput)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_VoiceInput=ServerMessageMessage_VoiceInput)
update_forward_refs(HandoffStep, ServerMessageMessage_VoiceInput=ServerMessageMessage_VoiceInput)
update_forward_refs(CallbackStep, ServerMessageMessage_VoiceRequest=ServerMessageMessage_VoiceRequest)
update_forward_refs(CreateWorkflowBlockDto, ServerMessageMessage_VoiceRequest=ServerMessageMessage_VoiceRequest)
update_forward_refs(HandoffStep, ServerMessageMessage_VoiceRequest=ServerMessageMessage_VoiceRequest)
