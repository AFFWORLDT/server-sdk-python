# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
from .azure_voice_voice_id import AzureVoiceVoiceId
from .chunk_plan import ChunkPlan
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .cartesia_voice_model import CartesiaVoiceModel
from .cartesia_voice_language import CartesiaVoiceLanguage
from .deepgram_voice_voice_id import DeepgramVoiceVoiceId
from .eleven_labs_voice_voice_id import ElevenLabsVoiceVoiceId
from .eleven_labs_voice_model import ElevenLabsVoiceModel
from .lmnt_voice_voice_id import LmntVoiceVoiceId
from .neets_voice_voice_id import NeetsVoiceVoiceId
from .open_ai_voice_voice_id import OpenAiVoiceVoiceId
from .play_ht_voice_voice_id import PlayHtVoiceVoiceId
from .play_ht_voice_emotion import PlayHtVoiceEmotion
from .rime_ai_voice_voice_id import RimeAiVoiceVoiceId
from .rime_ai_voice_model import RimeAiVoiceModel


class CreateAssistantDtoVoice_Azure(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["azure"] = "azure"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[AzureVoiceVoiceId, FieldMetadata(alias="voiceId")]
    speed: typing.Optional[float] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateAssistantDtoVoice_Cartesia(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["cartesia"] = "cartesia"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    model: typing.Optional[CartesiaVoiceModel] = None
    language: typing.Optional[CartesiaVoiceLanguage] = None
    voice_id: typing_extensions.Annotated[str, FieldMetadata(alias="voiceId")]
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateAssistantDtoVoice_Deepgram(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["deepgram"] = "deepgram"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[DeepgramVoiceVoiceId, FieldMetadata(alias="voiceId")]
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateAssistantDtoVoice_11Labs(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["11labs"] = "11labs"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[ElevenLabsVoiceVoiceId, FieldMetadata(alias="voiceId")]
    stability: typing.Optional[float] = None
    similarity_boost: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="similarityBoost")] = None
    style: typing.Optional[float] = None
    use_speaker_boost: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="useSpeakerBoost")] = None
    optimize_streaming_latency: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="optimizeStreamingLatency")
    ] = None
    enable_ssml_parsing: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="enableSsmlParsing")
    ] = None
    model: typing.Optional[ElevenLabsVoiceModel] = None
    language: typing.Optional[str] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateAssistantDtoVoice_Lmnt(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["lmnt"] = "lmnt"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[LmntVoiceVoiceId, FieldMetadata(alias="voiceId")]
    speed: typing.Optional[float] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateAssistantDtoVoice_Neets(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["neets"] = "neets"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[NeetsVoiceVoiceId, FieldMetadata(alias="voiceId")]
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateAssistantDtoVoice_Openai(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["openai"] = "openai"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[OpenAiVoiceVoiceId, FieldMetadata(alias="voiceId")]
    speed: typing.Optional[float] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateAssistantDtoVoice_Playht(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["playht"] = "playht"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[PlayHtVoiceVoiceId, FieldMetadata(alias="voiceId")]
    speed: typing.Optional[float] = None
    temperature: typing.Optional[float] = None
    emotion: typing.Optional[PlayHtVoiceEmotion] = None
    voice_guidance: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="voiceGuidance")] = None
    style_guidance: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="styleGuidance")] = None
    text_guidance: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="textGuidance")] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateAssistantDtoVoice_RimeAi(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["rime-ai"] = "rime-ai"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[RimeAiVoiceVoiceId, FieldMetadata(alias="voiceId")]
    model: typing.Optional[RimeAiVoiceModel] = None
    speed: typing.Optional[float] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


CreateAssistantDtoVoice = typing.Union[
    CreateAssistantDtoVoice_Azure,
    CreateAssistantDtoVoice_Cartesia,
    CreateAssistantDtoVoice_Deepgram,
    CreateAssistantDtoVoice_11Labs,
    CreateAssistantDtoVoice_Lmnt,
    CreateAssistantDtoVoice_Neets,
    CreateAssistantDtoVoice_Openai,
    CreateAssistantDtoVoice_Playht,
    CreateAssistantDtoVoice_RimeAi,
]
