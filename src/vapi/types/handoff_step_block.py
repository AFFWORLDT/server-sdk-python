# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .create_conversation_block_dto_messages_item import CreateConversationBlockDtoMessagesItem
import typing_extensions
from .json_schema import JsonSchema
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .create_tool_call_block_dto_messages_item import CreateToolCallBlockDtoMessagesItem
from .create_tool_call_block_dto_tool import CreateToolCallBlockDtoTool
from .create_workflow_block_dto_messages_item import CreateWorkflowBlockDtoMessagesItem
from ..core.pydantic_utilities import update_forward_refs


class HandoffStepBlock_Conversation(UniversalBaseModel):
    """
    This is the block to use. To use an existing block, use `blockId`.
    """

    type: typing.Literal["conversation"] = "conversation"
    messages: typing.Optional[typing.List[CreateConversationBlockDtoMessagesItem]] = None
    input_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="inputSchema")] = None
    output_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="outputSchema")] = None
    instruction: str
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class HandoffStepBlock_ToolCall(UniversalBaseModel):
    """
    This is the block to use. To use an existing block, use `blockId`.
    """

    type: typing.Literal["tool-call"] = "tool-call"
    messages: typing.Optional[typing.List[CreateToolCallBlockDtoMessagesItem]] = None
    input_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="inputSchema")] = None
    output_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="outputSchema")] = None
    tool: typing.Optional[CreateToolCallBlockDtoTool] = None
    tool_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="toolId")] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class HandoffStepBlock_Workflow(UniversalBaseModel):
    """
    This is the block to use. To use an existing block, use `blockId`.
    """

    type: typing.Literal["workflow"] = "workflow"
    messages: typing.Optional[typing.List[CreateWorkflowBlockDtoMessagesItem]] = None
    input_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="inputSchema")] = None
    output_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="outputSchema")] = None
    steps: typing.Optional[typing.List["CreateWorkflowBlockDtoStepsItem"]] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .callback_step import CallbackStep  # noqa: E402
from .create_workflow_block_dto import CreateWorkflowBlockDto  # noqa: E402
from .handoff_step import HandoffStep  # noqa: E402

HandoffStepBlock = typing.Union[HandoffStepBlock_Conversation, HandoffStepBlock_ToolCall, HandoffStepBlock_Workflow]
from .create_workflow_block_dto_steps_item import CreateWorkflowBlockDtoStepsItem  # noqa: E402

update_forward_refs(CallbackStep, HandoffStepBlock_Workflow=HandoffStepBlock_Workflow)
update_forward_refs(CreateWorkflowBlockDto, HandoffStepBlock_Workflow=HandoffStepBlock_Workflow)
update_forward_refs(HandoffStep, HandoffStepBlock_Workflow=HandoffStepBlock_Workflow)
update_forward_refs(HandoffStepBlock_Workflow)
