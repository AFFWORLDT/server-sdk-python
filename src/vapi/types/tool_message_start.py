# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .condition import Condition
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ToolMessageStart(UniversalBaseModel):
    content: str = pydantic.Field()
    """
    This is the content that the assistant says when this message is triggered.
    """

    conditions: typing.Optional[typing.List[Condition]] = pydantic.Field(default=None)
    """
    This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
