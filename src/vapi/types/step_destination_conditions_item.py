# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .rule_based_condition_operator import RuleBasedConditionOperator
import typing_extensions
from ..core.serialization import FieldMetadata


class StepDestinationConditionsItem_ModelBased(UniversalBaseModel):
    type: typing.Literal["model-based"] = "model-based"
    instruction: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class StepDestinationConditionsItem_RuleBased(UniversalBaseModel):
    type: typing.Literal["rule-based"] = "rule-based"
    operator: RuleBasedConditionOperator
    left_side: typing_extensions.Annotated[str, FieldMetadata(alias="leftSide")]
    right_side: typing_extensions.Annotated[str, FieldMetadata(alias="rightSide")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


StepDestinationConditionsItem = typing.Union[
    StepDestinationConditionsItem_ModelBased, StepDestinationConditionsItem_RuleBased
]
