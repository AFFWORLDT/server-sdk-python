# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .client_message_conversation_update_messages_item import ClientMessageConversationUpdateMessagesItem
import typing_extensions
from .open_ai_message import OpenAiMessage
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .client_message_speech_update_status import ClientMessageSpeechUpdateStatus
from .client_message_speech_update_role import ClientMessageSpeechUpdateRole
from .client_message_transcript_role import ClientMessageTranscriptRole
from .client_message_transcript_transcript_type import ClientMessageTranscriptTranscriptType
from .client_message_tool_calls_tool_with_tool_call_list_item import ClientMessageToolCallsToolWithToolCallListItem
from .tool_call import ToolCall


class ClientMessageMessage_ConversationUpdate(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["conversation-update"] = "conversation-update"
    messages: typing.Optional[typing.List[ClientMessageConversationUpdateMessagesItem]] = None
    messages_open_ai_formatted: typing_extensions.Annotated[
        typing.List[OpenAiMessage], FieldMetadata(alias="messagesOpenAIFormatted")
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_Hang(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["hang"] = "hang"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_Metadata(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["metadata"] = "metadata"
    metadata: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_ModelOutput(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["model-output"] = "model-output"
    output: typing.Dict[str, typing.Optional[typing.Any]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_SpeechUpdate(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["speech-update"] = "speech-update"
    status: ClientMessageSpeechUpdateStatus
    role: ClientMessageSpeechUpdateRole

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_Transcript(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["transcript"] = "transcript"
    role: ClientMessageTranscriptRole
    transcript_type: typing_extensions.Annotated[
        ClientMessageTranscriptTranscriptType, FieldMetadata(alias="transcriptType")
    ]
    transcript: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_ToolCalls(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["tool-calls"] = "tool-calls"
    tool_with_tool_call_list: typing_extensions.Annotated[
        typing.List[ClientMessageToolCallsToolWithToolCallListItem], FieldMetadata(alias="toolWithToolCallList")
    ]
    tool_call_list: typing_extensions.Annotated[typing.List[ToolCall], FieldMetadata(alias="toolCallList")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_ToolCallsResult(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["tool-calls-result"] = "tool-calls-result"
    tool_call_result: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]], FieldMetadata(alias="toolCallResult")
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_UserInterrupted(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["user-interrupted"] = "user-interrupted"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_LanguageChanged(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["language-changed"] = "language-changed"
    language: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ClientMessageMessage_VoiceInput(UniversalBaseModel):
    """
    These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.
    """

    type: typing.Literal["voice-input"] = "voice-input"
    input: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ClientMessageMessage = typing.Union[
    ClientMessageMessage_ConversationUpdate,
    ClientMessageMessage_Hang,
    ClientMessageMessage_Metadata,
    ClientMessageMessage_ModelOutput,
    ClientMessageMessage_SpeechUpdate,
    ClientMessageMessage_Transcript,
    ClientMessageMessage_ToolCalls,
    ClientMessageMessage_ToolCallsResult,
    ClientMessageMessage_UserInterrupted,
    ClientMessageMessage_LanguageChanged,
    ClientMessageMessage_VoiceInput,
]
