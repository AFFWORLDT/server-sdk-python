# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
from .function_tool_with_tool_call_messages_item import FunctionToolWithToolCallMessagesItem
from .tool_call import ToolCall
from .open_ai_function import OpenAiFunction
from .server import Server
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .ghl_tool_with_tool_call_messages_item import GhlToolWithToolCallMessagesItem
from .ghl_tool_metadata import GhlToolMetadata
from .make_tool_with_tool_call_messages_item import MakeToolWithToolCallMessagesItem
from .make_tool_metadata import MakeToolMetadata


class ServerMessageToolCallsToolWithToolCallListItem_Function(UniversalBaseModel):
    type: typing.Literal["function"] = "function"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[FunctionToolWithToolCallMessagesItem]] = None
    tool_call: typing_extensions.Annotated[ToolCall, FieldMetadata(alias="toolCall")]
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageToolCallsToolWithToolCallListItem_Ghl(UniversalBaseModel):
    type: typing.Literal["ghl"] = "ghl"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[GhlToolWithToolCallMessagesItem]] = None
    tool_call: typing_extensions.Annotated[ToolCall, FieldMetadata(alias="toolCall")]
    metadata: GhlToolMetadata
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ServerMessageToolCallsToolWithToolCallListItem_Make(UniversalBaseModel):
    type: typing.Literal["make"] = "make"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[MakeToolWithToolCallMessagesItem]] = None
    tool_call: typing_extensions.Annotated[ToolCall, FieldMetadata(alias="toolCall")]
    metadata: MakeToolMetadata
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ServerMessageToolCallsToolWithToolCallListItem = typing.Union[
    ServerMessageToolCallsToolWithToolCallListItem_Function,
    ServerMessageToolCallsToolWithToolCallListItem_Ghl,
    ServerMessageToolCallsToolWithToolCallListItem_Make,
]
