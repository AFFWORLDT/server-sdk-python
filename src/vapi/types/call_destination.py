# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class CallDestination_Number(UniversalBaseModel):
    """
    This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.
    """

    type: typing.Literal["number"] = "number"
    number_e_164_check_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="numberE164CheckEnabled")
    ] = None
    number: str
    extension: typing.Optional[str] = None
    caller_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callerId")] = None
    message: typing.Optional[str] = None
    description: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CallDestination_Sip(UniversalBaseModel):
    """
    This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.
    """

    type: typing.Literal["sip"] = "sip"
    sip_uri: typing_extensions.Annotated[str, FieldMetadata(alias="sipUri")]
    message: typing.Optional[str] = None
    description: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


CallDestination = typing.Union[CallDestination_Number, CallDestination_Sip]
