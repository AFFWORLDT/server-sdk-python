# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
from .tool_template_setup import ToolTemplateSetup
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class CreateToolTemplateDtoProviderDetails_Make(UniversalBaseModel):
    type: typing.Literal["make"] = "make"
    template_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="templateUrl")] = None
    setup_instructions: typing_extensions.Annotated[
        typing.Optional[typing.List[ToolTemplateSetup]], FieldMetadata(alias="setupInstructions")
    ] = None
    scenario_id: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="scenarioId")] = None
    scenario_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="scenarioName")] = None
    trigger_hook_id: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="triggerHookId")] = None
    trigger_hook_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="triggerHookName")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateToolTemplateDtoProviderDetails_Ghl(UniversalBaseModel):
    type: typing.Literal["ghl"] = "ghl"
    template_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="templateUrl")] = None
    setup_instructions: typing_extensions.Annotated[
        typing.Optional[typing.List[ToolTemplateSetup]], FieldMetadata(alias="setupInstructions")
    ] = None
    workflow_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workflowId")] = None
    workflow_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workflowName")] = None
    webhook_hook_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="webhookHookId")] = None
    webhook_hook_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="webhookHookName")] = None
    location_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="locationId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateToolTemplateDtoProviderDetails_Function(UniversalBaseModel):
    type: typing.Literal["function"] = "function"
    template_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="templateUrl")] = None
    setup_instructions: typing_extensions.Annotated[
        typing.Optional[typing.List[ToolTemplateSetup]], FieldMetadata(alias="setupInstructions")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


CreateToolTemplateDtoProviderDetails = typing.Union[
    CreateToolTemplateDtoProviderDetails_Make,
    CreateToolTemplateDtoProviderDetails_Ghl,
    CreateToolTemplateDtoProviderDetails_Function,
]
