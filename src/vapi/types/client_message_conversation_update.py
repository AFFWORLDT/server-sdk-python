# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .client_message_conversation_update_messages_item import ClientMessageConversationUpdateMessagesItem
import pydantic
import typing_extensions
from .open_ai_message import OpenAiMessage
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ClientMessageConversationUpdate(UniversalBaseModel):
    messages: typing.Optional[typing.List[ClientMessageConversationUpdateMessagesItem]] = pydantic.Field(default=None)
    """
    This is the most up-to-date conversation history at the time the message is sent.
    """

    messages_open_ai_formatted: typing_extensions.Annotated[
        typing.List[OpenAiMessage], FieldMetadata(alias="messagesOpenAIFormatted")
    ] = pydantic.Field()
    """
    This is the most up-to-date conversation history at the time the message is sent, formatted for OpenAI.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
