# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...types.conversation_block_messages_item import ConversationBlockMessagesItem
import typing_extensions
from ...types.json_schema import JsonSchema
from ...core.serialization import FieldMetadata
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ...types.tool_call_block_messages_item import ToolCallBlockMessagesItem
from ...types.tool_call_block_tool import ToolCallBlockTool
from ...types.callback_step import CallbackStep
from ...types.create_workflow_block_dto import CreateWorkflowBlockDto
from ...types.handoff_step import HandoffStep
from ...types.workflow_block_messages_item import WorkflowBlockMessagesItem
from ...types.workflow_block_steps_item import WorkflowBlockStepsItem
from ...core.pydantic_utilities import update_forward_refs


class BlocksCreateResponse_Conversation(UniversalBaseModel):
    type: typing.Literal["conversation"] = "conversation"
    messages: typing.Optional[typing.List[ConversationBlockMessagesItem]] = None
    input_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="inputSchema")] = None
    output_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="outputSchema")] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    name: typing.Optional[str] = None
    instruction: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BlocksCreateResponse_ToolCall(UniversalBaseModel):
    type: typing.Literal["tool-call"] = "tool-call"
    messages: typing.Optional[typing.List[ToolCallBlockMessagesItem]] = None
    input_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="inputSchema")] = None
    output_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="outputSchema")] = None
    tool: typing.Optional[ToolCallBlockTool] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    name: typing.Optional[str] = None
    tool_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="toolId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BlocksCreateResponse_Workflow(UniversalBaseModel):
    type: typing.Literal["workflow"] = "workflow"
    messages: typing.Optional[typing.List[WorkflowBlockMessagesItem]] = None
    input_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="inputSchema")] = None
    output_schema: typing_extensions.Annotated[typing.Optional[JsonSchema], FieldMetadata(alias="outputSchema")] = None
    steps: typing.Optional[typing.List[WorkflowBlockStepsItem]] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


BlocksCreateResponse = typing.Union[
    BlocksCreateResponse_Conversation, BlocksCreateResponse_ToolCall, BlocksCreateResponse_Workflow
]
update_forward_refs(CallbackStep, BlocksCreateResponse_Workflow=BlocksCreateResponse_Workflow)
update_forward_refs(CreateWorkflowBlockDto, BlocksCreateResponse_Workflow=BlocksCreateResponse_Workflow)
update_forward_refs(HandoffStep, BlocksCreateResponse_Workflow=BlocksCreateResponse_Workflow)
