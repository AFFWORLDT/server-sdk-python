# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
from ...types.azure_voice_voice_id import AzureVoiceVoiceId
from ...types.chunk_plan import ChunkPlan
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ...types.cartesia_voice_model import CartesiaVoiceModel
from ...types.cartesia_voice_language import CartesiaVoiceLanguage
from ...types.deepgram_voice_voice_id import DeepgramVoiceVoiceId
from ...types.eleven_labs_voice_voice_id import ElevenLabsVoiceVoiceId
from ...types.eleven_labs_voice_model import ElevenLabsVoiceModel
from ...types.lmnt_voice_voice_id import LmntVoiceVoiceId
from ...types.neets_voice_voice_id import NeetsVoiceVoiceId
from ...types.open_ai_voice_voice_id import OpenAiVoiceVoiceId
from ...types.play_ht_voice_voice_id import PlayHtVoiceVoiceId
from ...types.play_ht_voice_emotion import PlayHtVoiceEmotion
from ...types.rime_ai_voice_voice_id import RimeAiVoiceVoiceId
from ...types.rime_ai_voice_model import RimeAiVoiceModel


class UpdateAssistantDtoVoice_Azure(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["azure"] = "azure"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[AzureVoiceVoiceId, FieldMetadata(alias="voiceId")]
    speed: typing.Optional[float] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UpdateAssistantDtoVoice_Cartesia(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["cartesia"] = "cartesia"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    model: typing.Optional[CartesiaVoiceModel] = None
    language: typing.Optional[CartesiaVoiceLanguage] = None
    voice_id: typing_extensions.Annotated[str, FieldMetadata(alias="voiceId")]
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UpdateAssistantDtoVoice_Deepgram(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["deepgram"] = "deepgram"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[DeepgramVoiceVoiceId, FieldMetadata(alias="voiceId")]
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UpdateAssistantDtoVoice_11Labs(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["11labs"] = "11labs"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[ElevenLabsVoiceVoiceId, FieldMetadata(alias="voiceId")]
    stability: typing.Optional[float] = None
    similarity_boost: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="similarityBoost")] = None
    style: typing.Optional[float] = None
    use_speaker_boost: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="useSpeakerBoost")] = None
    optimize_streaming_latency: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="optimizeStreamingLatency")
    ] = None
    enable_ssml_parsing: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="enableSsmlParsing")
    ] = None
    model: typing.Optional[ElevenLabsVoiceModel] = None
    language: typing.Optional[str] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UpdateAssistantDtoVoice_Lmnt(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["lmnt"] = "lmnt"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[LmntVoiceVoiceId, FieldMetadata(alias="voiceId")]
    speed: typing.Optional[float] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UpdateAssistantDtoVoice_Neets(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["neets"] = "neets"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[NeetsVoiceVoiceId, FieldMetadata(alias="voiceId")]
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UpdateAssistantDtoVoice_Openai(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["openai"] = "openai"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[OpenAiVoiceVoiceId, FieldMetadata(alias="voiceId")]
    speed: typing.Optional[float] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UpdateAssistantDtoVoice_Playht(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["playht"] = "playht"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[PlayHtVoiceVoiceId, FieldMetadata(alias="voiceId")]
    speed: typing.Optional[float] = None
    temperature: typing.Optional[float] = None
    emotion: typing.Optional[PlayHtVoiceEmotion] = None
    voice_guidance: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="voiceGuidance")] = None
    style_guidance: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="styleGuidance")] = None
    text_guidance: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="textGuidance")] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UpdateAssistantDtoVoice_RimeAi(UniversalBaseModel):
    """
    These are the options for the assistant's voice.
    """

    provider: typing.Literal["rime-ai"] = "rime-ai"
    filler_injection_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="fillerInjectionEnabled")
    ] = None
    voice_id: typing_extensions.Annotated[RimeAiVoiceVoiceId, FieldMetadata(alias="voiceId")]
    model: typing.Optional[RimeAiVoiceModel] = None
    speed: typing.Optional[float] = None
    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


UpdateAssistantDtoVoice = typing.Union[
    UpdateAssistantDtoVoice_Azure,
    UpdateAssistantDtoVoice_Cartesia,
    UpdateAssistantDtoVoice_Deepgram,
    UpdateAssistantDtoVoice_11Labs,
    UpdateAssistantDtoVoice_Lmnt,
    UpdateAssistantDtoVoice_Neets,
    UpdateAssistantDtoVoice_Openai,
    UpdateAssistantDtoVoice_Playht,
    UpdateAssistantDtoVoice_RimeAi,
]
