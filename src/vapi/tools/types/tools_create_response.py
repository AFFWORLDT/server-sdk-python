# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
from ...types.dtmf_tool_messages_item import DtmfToolMessagesItem
import datetime as dt
from ...types.open_ai_function import OpenAiFunction
from ...types.server import Server
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ...types.end_call_tool_messages_item import EndCallToolMessagesItem
from ...types.function_tool_messages_item import FunctionToolMessagesItem
from ...types.ghl_tool_messages_item import GhlToolMessagesItem
from ...types.ghl_tool_metadata import GhlToolMetadata
from ...types.make_tool_messages_item import MakeToolMessagesItem
from ...types.make_tool_metadata import MakeToolMetadata
from ...types.transfer_call_tool_messages_item import TransferCallToolMessagesItem
from ...types.transfer_call_tool_destinations_item import TransferCallToolDestinationsItem
from ...types.output_tool_messages_item import OutputToolMessagesItem


class ToolsCreateResponse_Dtmf(UniversalBaseModel):
    type: typing.Literal["dtmf"] = "dtmf"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[DtmfToolMessagesItem]] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ToolsCreateResponse_EndCall(UniversalBaseModel):
    type: typing.Literal["endCall"] = "endCall"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[EndCallToolMessagesItem]] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ToolsCreateResponse_Function(UniversalBaseModel):
    type: typing.Literal["function"] = "function"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[FunctionToolMessagesItem]] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ToolsCreateResponse_Ghl(UniversalBaseModel):
    type: typing.Literal["ghl"] = "ghl"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[GhlToolMessagesItem]] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None
    metadata: GhlToolMetadata

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ToolsCreateResponse_Make(UniversalBaseModel):
    type: typing.Literal["make"] = "make"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[MakeToolMessagesItem]] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None
    metadata: MakeToolMetadata

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ToolsCreateResponse_TransferCall(UniversalBaseModel):
    type: typing.Literal["transferCall"] = "transferCall"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[TransferCallToolMessagesItem]] = None
    destinations: typing.Optional[typing.List[TransferCallToolDestinationsItem]] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ToolsCreateResponse_Output(UniversalBaseModel):
    type: typing.Literal["output"] = "output"
    async_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="async")] = None
    messages: typing.Optional[typing.List[OutputToolMessagesItem]] = None
    id: str
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    function: typing.Optional[OpenAiFunction] = None
    server: typing.Optional[Server] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ToolsCreateResponse = typing.Union[
    ToolsCreateResponse_Dtmf,
    ToolsCreateResponse_EndCall,
    ToolsCreateResponse_Function,
    ToolsCreateResponse_Ghl,
    ToolsCreateResponse_Make,
    ToolsCreateResponse_TransferCall,
    ToolsCreateResponse_Output,
]
